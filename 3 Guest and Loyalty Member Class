class Guest:
    """represents a guest with personal details and their booking history."""
    
    def __init__(self, guest_id, name, email, phone):
        """Initializes a guest with ID, name, email, phone, and an empty booking history."""
        if not email or "@" not in email:
            raise ValueError("Invalid email format")
        if len(str(phone)) < 10:  # Ensure phone has at least 10 digits
            raise ValueError("Phone number must be at least 10 digits")
        self.guest_id = guest_id 
        self.name = name
        self.email = email  
        self.phone = phone 
        self.bookings = []

    def update_profile(self, name=None, email=None, phone=None):
        """Updates guest profile details if provided"""
        if name:
            self.name = name
        if email:
            self.email = email
        if phone:
            self.phone = phone

    def view_history(self):
        """Returns the guest's booking history"""
        return self.bookings

    def manage_bookings(self, booking):
        """Adds a booking to the guest's booking history"""
        self.bookings.append(booking)

    def __str__(self):
        """Returns a string representation of the guest"""
        return f"Guest {self.name} ({self.guest_id})"


class LoyaltyMember(Guest):
    def __init__(self, guest_id, name, email, phone, points=0, tier="Bronze"):
        super().__init__(guest_id, name, email, phone)
        self.points = points
        self.tier = tier
        self.loyalty_program = None  # Initialize the loyalty program as None
    
    def set_loyalty_program(self, loyalty_program):
        self.loyalty_program = loyalty_program
        self.update_tier()  # Update tier when the program is set

    def earn_points(self, points):
        self.points += points
        self.update_tier()

    def redeem_points(self, points):
        if self.points >= points:
            self.points -= points
        else:
            raise ValueError("Not enough points")

    def update_tier(self):
        # Update tier based on the points
        if self.points >= self.loyalty_program.tier_requirements.get("Gold", float('inf')):
            self.tier = "Gold"
        elif self.points >= self.loyalty_program.tier_requirements.get("Silver", float('inf')):
            self.tier = "Silver"
        else:
            self.tier = "Bronze"

