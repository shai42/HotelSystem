from datetime import datetime, date

#Test Case 1: Guest Account Creation 
print("\n Testing Guest Account Creation")
try:
    #Success test case
    guest1 = Guest(1, "Shaikha", "Shaikha@gmail.com", "1234567890")
    assert guest1.name == "Shaikha"
    assert guest1.email == "Shaikha@gmail.com"
    print("✅ Valid guest creation passed")

    #Fail 1: Invalid email
    try:
        Guest(2, "Ahmad", "", "9876543210")
        print("❌ Invalid email test failed - no exception raised")
    except ValueError as e:
        print(f"✅ Invalid email test passed (got expected error: {str(e)})")

    #Fail 2: Invalid phone
    try:
        Guest(3, "Mohammad", "Mohammad@gmail.com", "12345")
        print("❌ Invalid phone test failed - no exception raised")
    except ValueError as e:
        print(f"✅ Invalid phone test passed (got expected error: {str(e)})")

except Exception as e:
    print(f"❌ Guest Account Creation tests failed: {str(e)}")

#Test Case 2: Room availability search
print("\n Testing Room Availability")
try:
    room1 = Room(101, "Deluxe", ["Balcony", "AC"], 100)
    room2 = Room(102, "Suite", ["TV", "AC", "Fridge"], 200, available=False)
    hotel = Hotel(1, "Royal Stay Hotel")
    hotel.add_room(room1)
    hotel.add_room(room2)

    available_rooms = [room for room in hotel._rooms if room.is_available()]
    assert len(available_rooms) == 1
    assert available_rooms[0].room_no == 101
    print("✅ Initial room availability passed")

    #Test fake room number
    try:
        hotel.add_room(Room(101, "Fake", ["TV"], 150))
        print("❌ Fake room test failed - no exception raised")
    except ValueError as e:
        print(f"✅ Fake room test passed (got expected error: {str(e)})")

except Exception as e:
    print(f"❌ Room Availability tests failed: {str(e)}")

#Test Case 3: Room Reservation
print("\n Testing Room Reservations")
try:
    guest = Guest(1, "Ali", "ali@yahoo.com", "1234567890")
    room = Room(101, "Deluxe", ["Balcony", "AC"], 100)
    hotel = Hotel(1, "Royal Stay Hotel")
    hotel.add_room(room)

    #Valid booking
    booking = Booking(1, guest, room, datetime(2025, 7, 21), datetime(2025, 7, 25))
    result = booking.make_booking()
    assert booking.status == "Confirmed"
    print("✅ Valid booking test passed")

    #Booking unavailable room
    unavailable_room = Room(102, "Suite", ["TV", "AC"], 200, available=False)
    hotel.add_room(unavailable_room)
    bad_booking = Booking(2, guest, unavailable_room, datetime(2025, 7, 21), datetime(2025, 7, 25))
    try:
        bad_booking.make_booking()
        print("❌ Unavailable room test failed - no exception raised")
    except ValueError as e:
        print(f"✅ Unavailable room test passed (got expected error: {str(e)})")

except Exception as e:
    print(f"❌ Room Reservation tests failed: {str(e)}")

#Test Case 4: Payment Processing
print("\n Testing Payments")
try:
    # Valid payment processing
    payment = Payment(1, 100, "Credit Card")
    assert payment.process_payment() == True
    assert payment.status == "Completed"
    print("✅ Payment processing test passed")

    # Payment refund
    assert payment.refund() == True
    assert payment.status == "Refunded"
    print("✅ Payment refund test passed")

    # Invalid refund (already refunded)
    try:
        payment.refund()
        print("❌ Double refund test failed - no exception raised")
    except InvalidPaymentStatusError as e:
        print(f"✅ Double refund test passed (got expected error: {str(e)})")

except Exception as e:
    print(f"❌ Payment Processing tests failed: {str(e)}")

#Test Case 5: Feedback submission
print("\n Testing Feedback ")
try:
    #Valid feedback
    feedback = Feedback(1, 5, "Amazing hotel! <3")
    assert feedback.submit_feedback() is not None
    print("✅ Feedback submission test passed")

    #Duplicate feedback
    try:
        feedback.submit_feedback()
        print("❌ Duplicate feedback test failed - no exception raised")
    except ValueError as e:
        print(f"✅ Duplicate feedback test passed (got expected error: {str(e)})")

except Exception as e:
    print(f"❌ Feedback tests failed: {str(e)}")

#Test Case 6: Loyalty program
print("\n Testing Loyalty Program")
try:
    program = LoyaltyProgram(
        tier_requirements={"Bronze": 10, "Silver": 500, "Gold": 2000},
        benefits={"Bronze": "Standard", "Silver": "Extra", "Gold": "Premium"}
    )
    member = LoyaltyMember(1, "Shaikha", "Shaikha@gmail.com", "1234567890")
    member.set_loyalty_program(program)
    
    #Test earning points
    member.earn_points(600)
    assert member.tier == "Silver"
    print("✅ Loyalty tier upgrade test passed")

    #Test invalid points redemption
    try:
        member.redeem_points(1000)  #Only has 600 points
        print("❌ Invalid points redemption test failed - no exception raised")
    except ValueError as e:
        print(f"✅ Invalid points redemption test passed (got expected error: {str(e)})")

except Exception as e:
    print(f"❌ Loyalty Program tests failed: {str(e)}")

print("\n All Tests are Completed")
